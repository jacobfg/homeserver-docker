# deploy weight 10

########################### NETWORKS
# There is no need to create any networks outside this docker-compose file.
# You may customize the network subnets (192.168.90.0/24 and 91.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

########################### SECRETS
secrets:
  authelia_jwt_secret:
    file: $SECRETS_DIR/authelia_jwt_secret
  authelia_session_secret:
    file: $SECRETS_DIR/authelia_session_secret
  authelia_storage_encryption_key:
    file: $SECRETS_DIR/authelia_storage_encryption_key
  authelia_identity_providers_oidc_hmac_secret_file:
    file: $SECRETS_DIR/authelia_identity_providers_oidc_hmac_secret_file
  authelia_identity_providers_oidc_issuer_certificate_chain_file:
    file: $SECRETS_DIR/authelia_identity_providers_oidc_issuer_certificate_chain_file
  authelia_identity_providers_oidc_issuer_private_key_file:
    file: $SECRETS_DIR/authelia_identity_providers_oidc_issuer_private_key_file
  zigbee2mqtt_secrets.yaml:
    file: $SECRETS_DIR/zigbee2mqtt_secrets.yaml
  cf_api_key:
    file: $SECRETS_DIR/cf_api_key
  cf_dns_api_key:
    file: $SECRETS_DIR/cf_dns_api_key
  influxdb_user:
    file: $SECRETS_DIR/influxdb_user
  influxdb_password:
    file: $SECRETS_DIR/influxdb_password
  influxdb_admin_token:
    file: $SECRETS_DIR/influxdb_admin_token

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

# Keys common to some of the dependent services/apps
x-common-keys-apps-hostmode: &common-keys-apps-hostmode
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

########################### SERVICES
services:
  ############################# FRONTENDS
  # Traefik 2 - Reverse Proxy
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:v3.5.3@sha256:84eb6c0e67c99fa026bf1bf4b0afd9ad44350d375b4ebc5049c5f70543a729d6
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      # - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.sftp.address=:2021
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      # - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.dashboard=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=ERROR # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=false # change if/when public
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375 # Use this instead of the previous line if you have socket proxy.
      - --providers.docker.exposedByDefault=false
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME_CLOUD_SERVER
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME_CLOUD_SERVER
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for second domain
      - --providers.docker.network=t2_proxy
      # - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      socket_proxy:
    ports:
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 2021
        published: 2021
        protocol: tcp
        mode: host
    volumes:
      - $VOLUME_DIR/traefik/rules/cloudserver:/rules # file provider directory
      - $VOLUME_DIR/traefik/acme/acme.json:/acme.json # cert location - you must create this empty file and change permissions to 600
      - $VOLUME_DIR/traefik/logs/cloudserver/traefik:/logs # for fail2ban or crowdsec
      # - /var/run/docker.sock:/var/run/docker.sock:ro # If you use Docker Socket Proxy, comment this line out
    environment:
      - TZ
      # - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      # - CF_API_KEY_FILE=/run/secrets/cf_api_key
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf_dns_api_key
      - CF_ZONE_API_TOKEN_FILE=/run/secrets/cf_dns_api_key
      - DOMAINNAME_CLOUD_SERVER # Passing the domain name to the traefik container to be able to use the variable in rules.
      - DOCKER_SERVER_IP # Passing the docker server IP to the traefik container to be able to use the variable in rules.
    secrets:
      - cf_api_key
      - cf_dns_api_key
    labels:
      - "traefik.enable=true"
      # # HTTP-to-HTTPS Redirect
      # - "traefik.http.routers.http-catchall.entrypoints=http"
      # - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      # - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.priority=1"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME_CLOUD_SERVER"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME_CLOUD_SERVER"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAINNAME2" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAINNAME2" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"

      ## Homer access to API - Allow access without auth to /api/ using using homer
      ## HTTP Routers
      - "traefik.http.routers.traefik-api-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-api-rtr.priority=99"
      - "traefik.http.routers.traefik-api-rtr.rule=Host(`traefik.$DOMAINNAME_CLOUD_SERVER`) && ClientIP(`192.168.0.0/16`) && PathPrefix(`/api/version`) && Header(`Origin`,`https://home.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.traefik-api-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.traefik-api-rtr.middlewares=middlewares-api-no-auth@file,chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.traefik-api-rtr.service=api@internal"
      # ## CORS - would prefer to get CORS working and not bypass auth for this API, same issue with portainer
      # - "traefik.http.middlewares.cors.headers.accessControlAllowOriginList=https://home.$DOMAINNAME_CLOUD_SERVER,https://auth.$DOMAINNAME_CLOUD_SERVER"
      # - "traefik.http.middlewares.cors.headers.accessControlAllowMethods=GET,OPTIONS,POST"
      # - "traefik.http.middlewares.cors.headers.accessControlAllowHeaders=Content-Type,Authorization"
      # - "traefik.http.middlewares.cors.headers.accessControlAllowCredentials=true"
      # # - "traefik.http.middlewares.cors.headers.accessControlMaxAge=100"
      # # - "traefik.http.middlewares.cors.headers.addVaryHeader=true"
      # # Content-Type"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" #cors

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy:v0.4.1@sha256:3400c429c5f9e1b21d62130fb93b16e2e772d4fb7695bd52fc2b743800b9fe9e
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    # privileged: true # true for VM. False for unprivileged LXC container.
    ports:
      - 127.0.0.1:2375:2375 # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=warning # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=0 # portainer
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer
    labels: []

  # Light Split Horizon / Ad Blocking DNS Server
  # TODO: try adblock
  blocky:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: spx01/blocky:v0.22@sha256:ba17812054a15b58ac80772afe404e7caa1da8c972f0c9ff7754eb3924fd5f57
    container_name: blocky
    restart: always
    ports:
      - 53:53/tcp
      - 53:53/udp
    environment:
      - TZ
    volumes:
      - $VOLUME_DIR/blocky/config.yml:/app/config.yml
    labels:
      - "traefik.enable=false"
    extra_hosts:
      - "audiobookshelf.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "auth.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "duplicacy.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "esphome.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "filebrowser.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "home.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "homeassistant.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "influxdb.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "nodered.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "portainer.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "printerscanner.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "sftp.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "static.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "traefik.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "vscode.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"
      - "zigbee2mqtt.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP"

  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: authelia
    image: authelia/authelia:4.39.12@sha256:3d374f212b4e0d4b980e5e3fffced788c04912103b824649ae53b42110afeefb
    restart: always
    networks:
      - t2_proxy
    volumes:
      - $VOLUME_DIR/authelia:/config
    environment:
      - TZ
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_encryption_key
      - AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE=/run/secrets/authelia_identity_providers_oidc_hmac_secret_file
      - AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_CERTIFICATE_CHAIN_FILE=/run/secrets/authelia_identity_providers_oidc_issuer_certificate_chain_file
      - AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_PRIVATE_KEY_FILE=/run/secrets/authelia_identity_providers_oidc_issuer_private_key_file
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_encryption_key
      - authelia_identity_providers_oidc_hmac_secret_file
      - authelia_identity_providers_oidc_issuer_certificate_chain_file
      - authelia_identity_providers_oidc_issuer_private_key_file
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=Host(`auth.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.authelia-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      # - "traefik.http.routers.authelia-rtr.middlewares=cors@file,chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  # https://www.home-assistant.io/installation/raspberrypi
  homeassistant:
    <<: *common-keys-apps-hostmode # See EXTENSION FIELDS at the top
    container_name: homeassistant
    image: homeassistant/home-assistant:2025.10.1@sha256:9255033272ab8f7bede246109ea9e7302527faf3accbf2ba7ef619e2206107ad
    # depends_on:
    #   - influxdb
    network_mode: host
    environment:
      - TZ
    volumes:
      - $VOLUME_DIR/homeassistant:/config
      - /opt/backups/homeassistant:/config/backups
      - /opt/docker/stacks/.git:/config/.homeserver-docker/.git:ro
    labels: []
      # - "traefik.enable=true" file config
      # traefik config in file as url cannot be set via label and HA needs to be host mode

  # https://www.homeautomationguy.io/home-assistant-tips/installing-docker-home-assistant-and-portainer-on-ubuntu-linux/
  portainer:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: portainer
    image: portainer/portainer-ce:2.34.0@sha256:d61738f5a4670c50395a13a42345a5b9675d96573817ef009a6c7de48ce5a13d
    restart: always
    command: -H tcp://socket-proxy:2375
    environment:
      - TZ
      # - DOCKER_HOST=socket-proxy:2375
    volumes:
      - $VOLUME_DIR/portainer:/data
    networks:
      - t2_proxy
      - socket_proxy
    ports:
      - "127.0.0.1:9000:9000/tcp" # don't need to others
    logging:
      driver: none
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.priority=1"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"
      # set CORS via Traefik/Authelia
      # ## Homer access to API - Allow access without auth to /api/ using using homer
      # ## HTTP Routers
      # - "traefik.http.routers.portainer-api-rtr.entrypoints=https"
      # - "traefik.http.routers.portainer-api-rtr.priority=99"
      # - "traefik.http.routers.portainer-api-rtr.rule=Host(`portainer.$DOMAINNAME_CLOUD_SERVER`) && ClientIP(`192.168.0.0/16`) && PathPrefix(`/api/`) && Header(`Origin`,`https://home.$DOMAINNAME_CLOUD_SERVER`)"
      # - "traefik.http.routers.portainer-api-rtr.tls=true"
      # ## Middlewares
      # - "traefik.http.routers.portainer-api-rtr.middlewares=middlewares-api-no-auth@file,chain-no-auth@file"
      # ## HTTP Services
      # - "traefik.http.routers.portainer-api-rtr.service=portainer-svc"
    extra_hosts:
      - "auth.$DOMAINNAME_CLOUD_SERVER:$DOCKER_SERVER_IP" # required for oidc auth

  static-web-server:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: static-web-sever
    image: joseluisq/static-web-server:2.38.1@sha256:54345a59d7dfd54c1d8d5e14322b73eff5daa5ad6d06998e67ff53e149d93981
    volumes:
      - $VOLUME_DIR/static-web-server/public:/public
    logging:
      driver: none
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.staticserver-rtr.entrypoints=https"
      - "traefik.http.routers.staticserver-rtr.priority=1"
      - "traefik.http.routers.staticserver-rtr.rule=Host(`static.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.staticserver-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.staticserver-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.staticserver-rtr.service=staticserver-svc"
      - "traefik.http.services.staticserver-svc.loadbalancer.server.port=80"
      ## LOCAL ACCESS - Allow local (home) access without auth
      ## HTTP Routers
      - "traefik.http.routers.staticserver-api-rtr.entrypoints=https"
      - "traefik.http.routers.staticserver-api-rtr.priority=99"
      - "traefik.http.routers.staticserver-api-rtr.rule=Host(`static.$DOMAINNAME_CLOUD_SERVER`) && ClientIP(`192.168.0.0/16`)"
      - "traefik.http.routers.staticserver-api-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.staticserver-api-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.staticserver-api-rtr.service=staticserver-svc"

  duplicacy:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: duplicacy
    hostname: 4eb908d4f748 # for licensing
    image: saspus/duplicacy-web:v1.8.3@sha256:ed16a76e6ee0f606bb3aa6d49c6b6a8669c0187f12f79bd0fbeae7baddfefed1
    environment:
      - TZ
      - USR_ID=0
      - GRP_ID=0
    volumes:
      - $VOLUME_DIR/duplicacy/config:/config
      - $VOLUME_DIR/duplicacy/logs:/logs
      - $VOLUME_DIR/duplicacy/cache:/cache
      - $VOLUME_DIR:/source/docker/volumes:ro
      - /etc/systemd/system/docker-compose-app.service:/source/etc/systemd/system/docker-compose-app.service:ro
      - /etc/docker/daemon.json:/source/etc/docker/daemon.json:ro
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.duplicacy-rtr.entrypoints=https"
      - "traefik.http.routers.duplicacy-rtr.rule=Host(`duplicacy.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.duplicacy-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.duplicacy-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.duplicacy-rtr.service=duplicacy-svc"
      - "traefik.http.services.duplicacy-svc.loadbalancer.server.port=3875"
    extra_hosts:
      - "homeassistant.$DOMAINNAME_CLOUD_SERVER:192.168.90.254"

  influxdb:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: influxdb
    image: influxdb:2.7.12@sha256:674911452ada77ca762662d50dd0594c8823312f59b376500623a4f82c44f9be
    environment:
      - TZ
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME_FILE=/run/secrets/influxdb_user
      - DOCKER_INFLUXDB_INIT_PASSWORD_FILE=/run/secrets/influxdb_password
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN_FILE=/run/secrets/influxdb_admin_token
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      # - DOCKER_INFLUXDB_INIT_RETENTION=2y
    secrets:
      - influxdb_user
      - influxdb_password
      - influxdb_admin_token
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.253 # You can specify a static IP
    volumes:
      - $VOLUME_DIR/influxdb/data:/var/lib/influxdb2
      - $VOLUME_DIR/influxdb/config/:/etc/influxdb2
    ulimits:
      nofile:
        soft: 32768
        hard: 32768
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.influxdb-rtr.entrypoints=https"
      - "traefik.http.routers.influxdb-rtr.rule=Host(`influxdb.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.influxdb-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.influxdb-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.influxdb-rtr.service=influxdb-svc"
      - "traefik.http.services.influxdb-svc.loadbalancer.server.port=8086"

  # Zigbee & MQTT
  mosquitto:
    # TODO: mosquito tls (really not needed on a private hosted based network)
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: mosquitto
    image: eclipse-mosquitto:2.0.22@sha256:d219d3a72847f3aed6a1d66975972d3b17f86e39e8f6f6b86b4088b879c1a2d6
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.252 # You can specify a static IP
    volumes:
      - $VOLUME_DIR/mosquitto/config:/mosquitto/config
    ports:
      - "127.0.0.1:1883:1883/tcp"
      # - 9001:9001 # not using websockets
    command: "mosquitto -c /mosquitto/config/mosquitto.conf"
    labels:
      - "traefik.enable=false"

  zigbee2mqtt:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:2.6.2@sha256:ffabf256f4550175278fbeebdbc3f174f2ffa005175e755324c5f06020af3e68
    volumes:
      - $VOLUME_DIR/zigbee2mqtt/data:/app/data
      - /run/udev:/run/udev:ro
    ports:
      - "127.0.0.1:8080:8080/tcp"
    environment:
      - TZ
      - ZIGBEE2MQTT_CONFIG_permit_join=true
    secrets:
      - zigbee2mqtt_secrets.yaml
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.zigbee2mqtt-rtr.entrypoints=https"
      - "traefik.http.routers.zigbee2mqtt-rtr.rule=Host(`zigbee2mqtt.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.zigbee2mqtt-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.zigbee2mqtt-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.zigbee2mqtt-rtr.service=zigbee2mqtt-svc"
      - "traefik.http.services.zigbee2mqtt-svc.loadbalancer.server.port=8080"

  # NodeRED
  node-red:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: nodered/node-red:4.1.0-22-minimal@sha256:ae63145ed3e1d19d0c367fc0103b54cbb97c87599c233e91f22530608490cd2b
    container_name: node-red
    environment:
      - TZ
    ports:
      - "127.0.0.1:1880:1880/tcp"
    volumes:
      - $VOLUME_DIR/nodered/data:/data
      - /opt/backups/energy-data:/energy-data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.nodered-rtr.entrypoints=https"
      - "traefik.http.routers.nodered-rtr.rule=Host(`nodered.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.nodered-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.nodered-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.nodered-rtr.service=nodered-svc"
      - "traefik.http.services.nodered-svc.loadbalancer.server.port=1880"
    extra_hosts:
      - "homeassistant.$DOMAINNAME_CLOUD_SERVER:192.168.90.254"

  # Homer
  homer:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: b4bz/homer:v25.10.1@sha256:d65c7d55f1c4621fb371e0d771f54bfc3f9bca1855ada559d72203ff6cfc5f93
    container_name: homer
    volumes:
      - $VOLUME_DIR/homer/assets/:/www/assets
      - $VOLUME_DIR/homer/custom-assets/:/www/custom-assets
    user: $PUID:$PGID
    environment:
      - INIT_ASSETS=0 # default
      - IPV6_DISABLE=1
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.homer-rtr.entrypoints=https"
      - "traefik.http.routers.homer-rtr.rule=Host(`home.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.homer-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.homer-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.homer-rtr.service=homer-svc"
      - "traefik.http.services.homer-svc.loadbalancer.server.port=8080"

  ############################# MAINTENANCE
  # crappy! find a better replacement
  # signal-cli-rest-api:
  #   <<: *common-keys-apps # See EXTENSION FIELDS at the top
  #   container_name: signal-cli-rest-api
  #   image: bbernhard/signal-cli-rest-api:0.83@sha256:d36ca6b9825441553169664dd424e2bba2f35c39d07584122798b536ff42923b
  #   environment:
  #     - MODE=native # normal #supported modes: json-rpc, native, normal
  #     # - AUTO_RECEIVE_SCHEDULE=*/5 * * * *
  #   ports:
  #     - "127.0.0.1:8088:8080/tcp"
  #   volumes:
  #     - "$VOLUME_DIR/signal-cli-config:/home/.local/share/signal-cli"
  #   labels:
  #     - "traefik.enable=true"
